---
import { sanityClient } from "../../lib/sanityClient";
import imageUrlBuilder from "@sanity/image-url";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";

const { slug } = Astro.params;

const builder = imageUrlBuilder(sanityClient);

function urlFor(source: any) {
    return builder.image(source);
}

type Project = {
    _id: string;
    title: string;
    subtitle?: string;
    slug: { current: string };
    projectType?: string;
    otherType?: string;
    mode?: string;
    description?: string;
    contribution?: string[];
    technologies?: string[];
    githubLink?: string;
    figmaLink?: string;
    images?: any[];
};

const PROJECT_QUERY = `*[_type == "projects" && slug.current == $slug][0]{
  _id,
  title,
  subtitle,
  slug,
  projectType,
  otherType,
  mode,
  description,
  contribution,
  technologies,
  githubLink,
  figmaLink,
  images
}`;

const project: Project | null = await sanityClient.fetch(PROJECT_QUERY, { slug });

if (!project) {
    return Astro.redirect("/404");
}
---

<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{project.title} - Viduni Hewage</title>
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon.png">
</head>
<body class="bg-gray-900 text-white min-h-screen">
<div class="fixed top-0 left-0 right-0 z-50 h-20">
    <Header />
</div>

<div class="container mx-auto px-6 py-20 max-w-4xl sm:mt-10 md:mt-12">
    <div class="mb-1 text-center">
        <h1 class="text-3xl font-semibold mb-3 sm:mb-0">
            <span class="text-4xl font-bold text-purple-400">{project.title}</span>
            {project.subtitle && ` - ${project.subtitle}`}
        </h1>
    </div>

    {project.images && project.images.length > 0 ? (
            <div
                    class="image-slider relative w-full h-[550px] flex justify-center items-center mb-1 rounded-lg"
                    data-project-id={project._id}
            >
                {project.images.map((image: any, imgIndex: number) => (
                        <img
                                src={urlFor(image).url()}
                                alt={`${project.title} - Image ${imgIndex + 1}`}
                                class="slider-image absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 max-h-full max-w-full object-contain transition-opacity duration-500"
                                class:list={[imgIndex === 0 ? "opacity-100" : "opacity-0"]}
                                data-index={imgIndex}
                        />
                ))}

                {project.images.length > 1 && (
                        <div class="absolute top-1/2 left-0 right-0 flex justify-between px-4 z-20 -translate-y-1/2 sm:m-0">
                            <button class="slider-btn prev-btn bg-black/50 hover:bg-white text-white hover:text-black p-2 rounded-full transition-all">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                                </svg>
                            </button>
                            <button class="slider-btn next-btn bg-black/50 hover:bg-white text-white hover:text-black p-2 rounded-full transition-all">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                            </button>
                        </div>
                )}
            </div>
    ) : (
            <div class="w-full h-64 flex items-center justify-center text-gray-500">
                <svg class="w-16 h-16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                    />
                </svg>
            </div>
    )}


    {project.description && (
            <div class="mb-12 space-y-4">
                {project.description.split('\n').map((para, index) => (
                        <p class="text-gray-300 text-md leading-relaxed text-justify">
                            {para}
                        </p>
                ))}
            </div>
    )}

    {project.contribution && project.contribution.length > 0 && (
            <div class="mb-12">
                <h2 class="text-xl font-semibold mb-4">My Contribution</h2>
                <ul class="list-disc list-inside text-gray-300 leading-relaxed space-y-2">
                    {project.contribution.map((point: string) => (
                            <li>{point}</li>
                    ))}
                </ul>
            </div>
    )}

    {project.technologies && project.technologies.length > 0 && (
            <div class="mb-12">
                <h2 class="text-xl font-semibold mb-4">Tech Stack</h2>
                <div class="flex flex-wrap gap-3">
                    {project.technologies.map((tech: string) => (
                            <span class="px-4 py-2 bg-gray-800 rounded text-sm font-medium border border-gray-700">
          {tech}
        </span>
                    ))}
                </div>
            </div>
    )}
    {(project.githubLink || project.figmaLink) && (
        <div class="mt-8 flex gap-4 flex-wrap">
            {project.githubLink && (
                    <a
                        href={project.githubLink}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="inline-block px-6 py-3 border border-white text-white rounded font-medium hover:bg-white hover:text-gray-900 transition"
                    >
                        View on GitHub
                    </a>
            )}
            {project.figmaLink && (
                <a
                    href={project.figmaLink}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="inline-block px-6 py-3 border border-white text-white rounded font-medium hover:bg-white hover:text-gray-900 transition"
                >
                    View on Figma
                </a>
            )}
        </div>
    )}
</div>

<Footer />

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const sliders = document.querySelectorAll<HTMLDivElement>(".image-slider");

        sliders.forEach((slider) => {
            const images = slider.querySelectorAll<HTMLImageElement>(".slider-image");
            const prevBtn = slider.querySelector<HTMLButtonElement>(".prev-btn");
            const nextBtn = slider.querySelector<HTMLButtonElement>(".next-btn");
            let current = 0;

            const showImage = (index: number) => {
                images.forEach((img, i) => {
                    img.classList.toggle("opacity-100", i === index);
                    img.classList.toggle("opacity-0", i !== index);
                });
            };

            prevBtn?.addEventListener("click", () => {
                current = (current - 1 + images.length) % images.length;
                showImage(current);
            });

            nextBtn?.addEventListener("click", () => {
                current = (current + 1) % images.length;
                showImage(current);
            });
        });
    });
</script>
</body>
</html>